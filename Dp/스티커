//9465: sticker

#include <iostream>
#include <algorithm>
#define MAX 100001

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int dp[2][MAX];
        dp[0][0] = dp[1][0] = 0;
        for (int i = 1; i <= n; i++) {
            cin >> dp[0][i];
        }
        for (int i = 1; i <= n; i++) {
            cin >> dp[1][i];
        }
        
        for (int i = 2; i <= n; i++) {
            dp[0][i] = max(dp[1][i-1],dp[1][i-2])+dp[0][i];
            dp[1][i] = max(dp[0][i - 1], dp[0][i-2])+ dp[1][i];
        }
        int answer = max(dp[1][n], dp[0][n]);
        cout << answer << '\n';
    }
    


    return 0;
}

/*
#include <vector>
#include <iostream>
#include <algorithm>
#include <string.h> //memset(배열, 초기화값, sizeof())
using namespace std;
//materials
int map[2][100001];
int cache[2][100001];
int n;

int dp(int y, int x)
{
    
    if (x >= n) return 0;
    int& ret = cache[y][x];
    if (ret != -1) return ret;

    if (y == 0)
    {
        return ret = max(map[0][x] + dp(1, x + 1), dp(1,x));
    }
    else if(y==1)
    {
        if (x + 1 >= n)
        {map[0][x + 1] = 0;}
        ret = max(map[1][x] + map[0][x + 1] + dp(1, x + 2),
                  map[1][x] + dp(0, x + 2));
        
        return ret = max(ret, dp(0, x + 1));
    }

    return ret;
}

int main(void)
{
    int T;
    cin >> T;

    while (T--)
    {
        cin >> n;
        memset(cache, -1, sizeof cache);

        for (int i = 0; i < 2; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                cin >> map[i][j];
            }
        }

        cout << dp(0, 0) << endl;
    }
}

*/
