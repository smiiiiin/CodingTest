// 재귀함수, 백트래킹, DFS이용 06:10-6:20  #빡구현
// 19236 청소년 상어
#include <iostream>
#include <algorithm>
using namespace std;
// 준비물: 판이랑 fish를 분리해서 저장하는 이유, 판위에서 fish들이 움직일거니깐
struct FISH{int y,x,dir;}; int map[4][4]; FISH fish[16];
int ret;
int dy[8]={-1,-1,0,1,1,1,0,-1};
int dx[8]={0,-1,-1,-1,0,1,1,1};

//갈때마다 달라지는건 상어의 위치와 상어가 먹은 sum,
void dfs(int map[4][4], FISH fish[16], int shark_y, int shark_x, int sum) {
    //복사한 걸로 해보고 안되면 그전으로 백트래킹 하기 위함 by 재귀
    int selected_map[4][4];
    FISH selected_fish[16];
    for(int y=0;y<4;y++){
        for(int x=0;x<4;x++){
            selected_map[y][x]= map[y][x];
        }
    }
    for(int i=0;i<16;i++) selected_fish[i]= fish[i];
    
    
    //eat
    int eatten_fish= selected_map[shark_y][shark_x];
    int shark_dir= fish[eatten_fish].dir;
    selected_map[shark_y][shark_x]=-1;
    selected_fish[eatten_fish].y=-1;
    selected_fish[eatten_fish].x=-1;
    selected_fish[eatten_fish].dir=-1;
    
    sum+=(eatten_fish+1);
    ret= max(ret, sum);
    
    //fish move
    for(int f=0;f<16;f++){
        if(selected_fish[f].y==-1) continue;// 죽은얘는 상종안해
        int cy= selected_fish[f].y; int cx= selected_fish[f].x; int cd= selected_fish[f].dir;
        int ny= cy+ dy[cd]; int nx= cx+ dx[cd]; int nd= cd;
        while(ny>3|| nx>3|| ny<0|| nx<0|| (ny==shark_y && nx==shark_x)){
            nd=(nd+1)%8; ny= cy+dy[nd]; nx= cx+dx[nd];
        }
        if(selected_map[ny][nx]!=-1){
            int next_fish= selected_map[ny][nx];
            
            //map에 대한 정보 변경
            selected_map[ny][nx]=f;
            selected_map[cy][cx]=next_fish;
            //물고기 개체에 대한 정보변경
            selected_fish[f].y=ny; selected_fish[f].x=nx; selected_fish[f].dir=nd;
            selected_fish[next_fish].y=cy;  selected_fish[next_fish].x=cx;}
        else{
            //map에 대한 정보 변경
            selected_map[ny][nx]=f;
            selected_map[cy][cx]=-1;
            //물고기 개체에 대한 정보변경
            selected_fish[f].y=ny; selected_fish[f].x=nx; selected_fish[f].dir=nd;}}
    
    
    //shark move
    for(int s=1;s<4;s++){
        int next_y= shark_y+ dy[shark_dir] *s;
        int next_x= shark_x+ dx[shark_dir]*s;
        if(next_y>3||next_y<0||next_x>3||next_x<0 ) break;
        if(selected_map[next_y][next_x]!=-1){
            dfs(selected_map, selected_fish, next_y,next_x,sum);
        }
    }
}

int main(){
    for(int y=0;y<4;y++){ int a,b;
        for(int x=0;x<4;x++){
            cin>>a>>b;
            --a; --b;
            map[y][x]=a; fish[a].y=y; fish[a].x=x;
            fish[a].dir=b;
        }
    }
    ret=0;
    dfs(map, fish,0,0,0);
    cout<<ret<<"\n";
    
    return 0;
}

