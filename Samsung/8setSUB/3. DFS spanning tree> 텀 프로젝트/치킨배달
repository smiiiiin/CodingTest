// 15686 치킨배달 : 그래프 DFS !!
// 너무 중요! min() 쓰는 방법: 내공간만큼 비교해서 그밖에
// for문 도는만큼 값이 나오고 변수는 켜켜이 한겹밖에서 초기화해야한다 !!! 필수
#include <iostream>
#include <algorithm>
#include <vector>
#define MAX 0x7ffffff
using namespace std;

int n, m,a; int min_thd{MAX};
struct POSI{int y, x;};
vector<POSI> home, shop, pick; //집 별로, 가게별로, 선택된 가게별로 정렬
int dis(POSI a, POSI b){return abs(a.y-b.y)+abs(a.x-b.x);}

// 최소 2번하고 싶으면 변수명을 3번 만들어서 밖으로밖으로

void update(){ //선택된 치킨집들에 대해서 각집마다 최소거리들의 합을 더한 후,
    // 그 값끼리 비교해서 가장 작은 값이 '치킨거리'다.
    
    int min_sec{0}; //켜켜이 직전에 선언
    // min_fir개수는 알고리즘 수식을 쓴 장소에서 (for pick-) 만큼 비교를 하고
    // 괄호 하나 벗어난 home.size 만큼 생성된다!!!
    for(int i=0;i<home.size();i++){
    int min_fir{MAX};
        for(int j=0;j<pick.size();j++){
             min_fir= min(min_fir, dis(home[i],pick[j]));}
        min_sec+=min_fir;
    }
    min_thd=min(min_sec,min_thd );
    return;}


void dfs(int idx, int sz){ //치킨거리를 선택해본다
    if(sz==m){update();} //가게 선택 다 했으면 그때의 치킨거리 구하기
    
    for(int i=idx; i<shop.size(); i++){
        pick.push_back(shop[i]); //넣었다
        dfs(i+1,sz+1); //여기서 사이즈 차면
        pick.pop_back();}} //뺐다


int main() {
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
    cin>>n>>m;
    for(int y=0;y<n;++y){
        for(int x=0;x<n;++x){
            cin>>a;
            if(a==1) home.push_back({y,x});
            if(a==2) shop.push_back({y,x});}}
    
    dfs(0,0);
    cout<<min_thd; return 0; }

    for(int y=0;y<n;++y){
        for(int x=0;x<n;++x){
            cin>>a;
            if(a==1) home.push_back({y,x});
            if(a==2) shop.push_back({y,x});}}
    
    dfs(0,0);
    cout<<ret; return 0; }
