//백준 11438 LCA 2 수정
#include <iostream>
#include <vector>
#include <queue>
#include <cstring>

using namespace std;
// 노드 수 해봤자 10^5 < 2^17 이므로 2^17번째 부모까지만 보면됨
const int MAX = 18; int n, m;
// parents[i][n] : i의 2^n 번째 부모
int parents[100000][MAX]; int depth[100000]; vector<int> adj[100000];

// BFS로 노드 깊이 저장
void depthBFS(){
    queue<int> q;q.push(1); depth[1]=0;
    while(!q.empty()){
        int cur=q.front(); q.pop();
        for(auto next: adj[cur]){
            if(depth[next]==-1){
                q.push(next);
                depth[next]=depth[cur]+1;}}}}

int main(){
    ios_base::sync_with_stdio(false); cout.tie(NULL); cin.tie(NULL);
    cin >> n;
    for (int i = 0; i < n-1; ++i){
        int a, b; cin >> a >> b;
        a--; b--;
        adj[a].push_back(b);
        adj[b].push_back(a);}

    // -1로 초기화
    memset(parents,-1,sizeof(parents));
    fill(depth,depth+n, -1);
    // root 의 깊이는 0
    depth[0] = 0;

    depthBFS();

    // 점핑테이블 부모노드 저장
    // 2^n번째: 할머니(좌)= 부모님의 부모(우)
    // (좌) 2^(n+1)= (우) 2^n + 2^n= 2* 2^n = 2^(n+1)
    for (int n = 1; n < MAX-1; ++n){
        for (int i = 1; i < n; ++i){
            if(parents[i][n]!=-1) parents[i][n+1] = parents[parents[i][n]][n];
        }
    }
    cin >> m;
    for (int i = 0; i < m; ++i){
        int a, b; cin >> a >> b; a--; b--;

        // depth[a] >= depth[b] 로 생각하기 위해 조정: a가 더 꼬맹이
        if(depth[a] < depth[b]) {int tmp=a ; a=b; b=tmp;}

        // 같은 depth로 만들기
        int diff = depth[a] - depth[b];

        // 자리수 2의 0제곱 자리
        int zari = 0;
        /*
         10= 2의 3제곱+ 2의 1제곱 거듭제곱으로 만들면 3번 오르고 1번 오른거다
         10을 2진수로 표현하면 1010(2)
         depth가 10번 차이나는 걸 2의 n승으로만 표현하면,
         10번 올라가는것의 의미= parent[나][n]을
         */
    while(diff){
        //이진수 뒷자리부터 0또는 1이 만들어지는데 즉, 1010(2)의 경우
        // diff는 0 1 0 1 이 순으로 생성되는데 1인 경우에 a는 자리수=n승 만큼 오른다
        if(diff%2) a = parents[a][zari];
        zari++; diff/=2;}

    // a==b 이면 a=b 가 공통조상
    if(a!=b){ //다르면 a==b일때까지 똑같이 올라간다
        for (int n = MAX-1; n>=0; n--){
            if(parents[a][n]!=parents[b][n]){ //다르면
                a = parents[a][n]; b = parents[b][n]; //같이 2^n칸 오른다
            }
        }
        // 위 과정이 끝나면 최종 a, b 는 같은 부모 아래 있음
        a = parents[a][0];}

    cout << a+1 << '\n';}

    return 0;}
