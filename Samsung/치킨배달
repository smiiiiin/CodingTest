// 15686 치킨배달 : 그래프 DFS
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int n, m,a, ret{0x7ffffff};
struct POSI{
    int y, x;
    // POSI(int y_posi,int x_posi) {y=y_posi; x=x_posi;}; !struct 재정의 할 수 ㅇ
};
int dis(POSI p, POSI p2){ return abs(p.y-p2.y)+abs(p.x-p2.x);}
vector<POSI> home, shop, pick; //집 별로, 가게별로, 선택된 가게별로 정렬

void update(){
    //(dis함수를 이용해서 집-가게 별 거리를 += 저장 한다) 치킨거리값을 '비교한다'
    
    int sum{0}; // 직전에 선언
    for(int i=0; i<home.size();i++){ // 집마다 돌면서
        int mini{1000000}; // 직전에 선언
        for(int j=0; j<pick.size();j++) //이때 다익스트라 사용가능하네...
            //근데 여기선 살릴 치킨집 최대 개수를 13으로 줌으로써 그냥 다 해볼 수 있도록 해줬네...
        { mini= min(mini, dis(home[i],pick[j]));}
        
        sum+=mini;}
    ret= min(ret,sum);
    
    return;}


void dfs(int idx, int sz){ //치킨거리를 선택해본다
    if(sz==m){update();} //가게 선택 다 했으면 그때의 치킨거리 구하기
    
    for(int i=idx; i<shop.size(); i++){
        pick.push_back(shop[i]);
        dfs(i+1,sz+1); //여기서 사이즈 차면
        pick.pop_back();}}


int main() {
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
    ret= 0x7ffffff; //답은 min이니 이걸로 초기화
    cin>>n>>m;
    for(int y=0;y<n;++y){
        for(int x=0;x<n;++x){
            cin>>a;
            if(a==1) home.push_back({y,x});
            // if(a==1) home.push_back(POSI(y,x)); // ! struct 재정의 시 문법
            if(a==2) shop.push_back({y,x});
        }}
    
    dfs(0,0);
    cout<<ret;
    return 0;
}
