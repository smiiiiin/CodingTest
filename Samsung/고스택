//SAMSUNG 백준 3425 고스택

#include <iostream>
#include <cstring>
#include <algorithm>
#include <stack>
#include <vector>
#include <queue>
#define MAX 1000000000
using namespace std;
typedef long long ll;
 
stack<ll> s;
vector<string> v;
vector<ll> num;
 
int NUM(ll x){
    s.push(x);
    return 0;}
 
int POP(){
    if (s.empty()) return 1; // 이거뭐야?
    s.pop();
    return 0;}
 
int INV(){
    if (s.empty()) return 1;
    ll x = -(s.top());
    s.pop();
    s.push(x);
    return 0;}
 
int DUP(){
    if (s.empty()) return 1;
    s.push(s.top());
    return 0;}
 
int SWP(){
    if (s.empty()) return 1;
    ll x = s.top();
    s.pop();
 
    if (s.empty()) return 1;
    ll y = s.top();
    s.pop();
    s.push(x);
    s.push(y);
    return 0;}
 
int ADD(){
    if (s.empty()) return 1;
    ll x = s.top();
    s.pop();
 
    if (s.empty()) return 1;
 
    x += s.top();
    s.pop();
    s.push(x);
 
    return 0;}


int SUB(){
    if (s.empty()) return 1;
    ll x = s.top();
    s.pop();
 
    if (s.empty()) return 1;
    x = s.top() - x;
    s.pop();
    s.push(x);
    return 0;}
 
int MUL(){
    if (s.empty()) return 1;
    ll x = s.top();
    s.pop();
    if (s.empty()) return 1;
    x *= s.top();
    s.pop();
    s.push(x);
    return 0;}
 
int DIV(){ //??
    bool minus= 0;

    if (s.empty()) return 1;
 
    ll x = s.top();
 
    if (x < 0) minus= 1;
 
    s.pop();
 
    if (s.empty()) return 1;
 
    ll y = s.top();
 
    if (y < 0) minus= 1;
 
    if (x == 0) return 1; //? 위에다가 써도 되지 않나?
    
    x = y / x;
    if (minus) x = -(abs(x));
    else x = abs(x);
    
    s.pop();
    s.push(x);
    return 0;}
 
int MOD(){
    bool minus = 0;
    if (s.empty()) return 1;
    ll x = s.top();
    s.pop();
    if (s.empty()) return 1;
    ll y = s.top();
 
    if (y < 0) minus=1;
 
    if (x == 0) return 1;
    x = y % x;
    
    if (minus) x = -(abs(x));
    else x = abs(x);
    s.pop();
    s.push(x);
    return 0;}
 
int main(){
    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
 
    int n;
    int first;
    int error;
    int c;
    ll x;
    string str;
 
    while (1) {
        error = 0;
        
        while (1) {
            cin >> str;
 
            if (str == "NUM") {
                cin >> x;
                num.push_back(x);
            }
            if (str == "QUIT") return 0;
            if (str == "END") break; //끝의 의미
            v.push_back(str); //vector v에 명령어를 넣는다
        }
 
        cin >> n;
        while (n--) {
            c = 0;
            cin >> first;
            s.push(first); //스택에 숫자를 넣는다
 
            for (int i = 0; i < v.size(); ++i) { //명령어 개수만큼
                if (v[i] == "NUM") {
                    error = NUM(num[c]);
                    ++c;
                }
                else if (v[i] == "POP") {
                    error = POP();
                }
                else if (v[i] == "INV") {
                    error = INV();
                }
                else if (v[i] == "DUP") {
                    error = DUP();
                }
                else if (v[i] == "SWP") {
                    error = SWP();
                }
                else if (v[i] == "ADD") {
                    error = ADD();
                }
                else if (v[i] == "SUB") {
                    error = SUB();
                }
                else if (v[i] == "MUL") {
                    error = MUL();
                }
                else if (v[i] == "DIV") {
                    error = DIV();
                }
                else if (v[i] == "MOD") {
                    error = MOD();
                }
 
                if (!s.empty() &&
                    (s.top() > MAX
                     || s.top() < -MAX)) error =1;
                if (error == 1) break;
                
            }
 
            if (error == 1 || s.size() != 1) {
                cout << "ERROR\n";
            }
            else {
                cout << s.top() << "\n";
            }
            while (!s.empty()) {
                s.pop();
            }
        }
 
        num.clear();
        v.clear();
        cout << endl;
    }
 
    return 0;
}
