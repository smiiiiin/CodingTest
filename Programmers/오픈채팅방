// 왜 안돼?
/* kakao 오픈채팅방 
 굉장히 중요한 꿀팁방출 코테설계방식은 SQL 테이블 쪼개는 것과 비슷하다 
 ID가 주키고 ACTION과 NAME의 관계를 표현하고 싶으면 ACTION: ID 랑 ID:NAME 2개의 묶음 만든다 */
 
#include <string>
#include <vector>
#include <sstream>
#include <unordered_map>
using namespace std;

vector<string> solution(vector<string> record) {
    
    stringstream ss; string fir, sec, thr;
    vector<string> answer;
    vector<pair<string,string>> action;  // {action, uid}
    unordered_map<string,string> final_name; // {uid: name} 
    
    for(auto i: record) {
        ss.str(i); ss>>fir>>sec>>thr;
        action.push_back({fir:sec});
       
        if(fir!="Leave"){ //왜 leave가 아니면 일까? 
             final_name[sec]=thr; // ID 가 키고 값은 최종 이름 
        }}
        
        
    for(auto i: record) {
        string result = "";
        result += final_name[action[i].second];
        if (action[i].first == "Enter") { result +=  "님이 들어왔습니다."; }
        else if (action[i].first == "Leave") { result += "님이 나갔습니다."; }
        else if (action[i].first == "Change") { continue; }
        answer.push_back(result);
    }
    
    return answer;
}


// 정답 

/* kakao 오픈채팅방 
 굉장히 중요한 꿀팁방출 코테설계방식은 SQL 테이블 쪼개는 것과 비슷하다 
 ID가 주키고 ACTION과 NAME의 관계를 표현하고 싶으면 ACTION: ID 랑 ID:NAME 2개의 묶음 만든다 */
#include <string>
#include <vector>
#include <unordered_map>
#include <sstream>
using namespace std;

vector<string> solution(vector<string> record) {
    vector<string> answer;
    // int n=record.size();
    vector<pair<string, string>> action; // {action, uid}
    unordered_map<string, string> final_name; // {uid: name}
    int N = record.size();
    for (auto& i:record ) {
        vector<string> splitVec;
        stringstream ss(i); string temp;
        while (ss >> temp) splitVec.push_back(temp);
        
        action.push_back({splitVec[0], splitVec[1]});           
        if (splitVec[0] != "Leave") {
            final_name[splitVec[1]] = splitVec[2];
        }
    }

    for (int i=0; i<record.size(); i++ ) {
        string result = "";
        result += final_name[action[i].second];
        if (action[i].first == "Enter") { result +=  "님이 들어왔습니다."; }
        else if (action[i].first == "Leave") { result += "님이 나갔습니다."; }
        else if (action[i].first == "Change") { continue; }
        answer.push_back(result);
    }
    
    return answer;
}
