// 프로그래머스 추석트래픽 
// .substr(처음인덱스, 개수)
#include <string>
#include <vector>
#include <iostream>
using namespace std;

int solution(vector<string> lines) {
    int answer = 0;
    vector<int> start_t, end_t;
    
    for(int i = 0; i < lines.size(); i++)
    {
        string h, m, s, ms; int ih, im, is, process;
        h = lines[i].substr(11, 2); m = lines[i].substr(14, 2); s = lines[i].substr(17, 2); ms = lines[i].substr(20, 3);
        process = stof(lines[i].substr(24, 5)) * 1000; 
        // ms로 단위통일 1000곱하기
        ih = stoi(h) * 3600 * 1000;
        im = stoi(m) * 60 * 1000;
        is = stoi(s) * 1000 + stoi(ms);
        
        start_t.push_back(ih + im + is - process + 1); // 1더하기 
        end_t.push_back(ih + im + is);}
    
    for(int i = 0; i < lines.size(); i++){
        int end_time = end_t[i] + 1000; 
        /*  끝나는 시간의 오름차순이니까 끝나는 시간부터 보면 앞에 짧퉁한 얘들은 자동 거르게된다
            1000더하는거 1초단위니까 
            start_t하면 안되는 이유 시작이 endtime보다 작다고 일찍끝난 짧은애도 포함시킴
        */
        int count = 0;
        
        for(int j = i; j < lines.size(); j++){
            if(start_t[j] < end_time) count++;}
        answer=max(answer,count);}
        
    return answer;}
