#include <iostream>
using namespace std;
// 4가지 방법이 있다. Matrix, List 2가지 버전과 X DFS, BFS 2가지 버전의 조합. 
// 1. Matrix X DFS 
bool map[1001][1001];
bool visited[1001];
int n,m,a,b,ret{0};

void dfs(int n){
    visited[n];
    
    for(int j=1;j<=n;j++){
        if(map[n][j]&&!visited[j]){
            dfs(j);
        }
    }
}

void solution(){
cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>a>>b;
        map[a][b]=1; 
        map[b][a]=1;//무방향에서 필수 잊지말기:) 
        
    }
        
    for(int i=1;i<=n;i++){
        if(!visited[i]){//visited가 안되어있어야 그 부분부터 시작하는게 맞다. 
        ret++; 
        dfs(i);}
    }
   
   cout<<ret<<"\n";
}

int main()
{
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
   solution();
    return 0;
}


// 2. List X DFS 
#include<iostream>
#include<vector>
using namespace std;

vector<int> li[10001]; //vector는 유동적이다 푹신푹신 밑으로 늘어난다. 
bool visited[10001];

int n,m,a,b,ret{0};

void dfs(int node){
    visited[node]=1; //이걸 안하면 어떻하냐? 
    for(auto v: li[node]) {
        if(!visited[v]){
            dfs(v);
        }
    }
}

int main(){
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
    
    cin>>n>>m;
    for(int i=0;i<m;i++){//선 개수 만큼 입력해야한다. 
        cin>>a>>b;
        li[a].push_back(b);
        li[b].push_back(a);
    }
    
    for(int i=1;i<=n;i++){
        if(!visited[i]) {ret++; dfs(i);}
    }
    
    cout<<ret<<"\n";
    
}


//3. Matrix X BFS 
#include <iostream>
#include <queue>
#include <vector>
#include <stdio.h>
#define MAX_SIZE 1000+1
using namespace std;
 
void bfs(int start);
bool map[MAX_SIZE][MAX_SIZE];
bool visited[MAX_SIZE];
int n, m; // 정점의 개수, 간선의 개수

void bfs(int start) {
    queue<int> q;
 
    visited[start] = true;
    q.push(start); //일단 나는 들어와서 가게를 채워주고 
    while (!q.empty()) { //내가 들어온 이상, 비지 않는 동안 
        int current = q.front(); //나 왔어. 
        q.pop();//나 나가. 대신 소개 해줄게. 
 
        
        for (int i = 1; i <= n; i++) {
            if (!visited[i]&&map[current][i]) {//unchecked라면 소개로 왔어요 
                visited[i] = true;
                q.push(i);
            }
        }
    }
}
 
int main() {
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; i++) { // 간선의 연결
        int u, v;
        scanf("%d %d", &u, &v);
        map[u][v]=1;
        map[v][u]=1;
    }
 
    int cnt = 0;
    fill_n(visited,n,0);
    
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            cnt++;
            bfs(i);
        }
    }
    printf("%d\n", cnt);
    return 0;
}


//3. Matrix X BFS 
#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int n,m,a,b,ret{0};
bool map[10001][10001];
bool visited[10001];

void bfs(int node){
    queue<int> q;
    q.push(node);
    visited[node]=1;
    while(!q.empty()){
        q.front();
        q.pop();
        for(int i=1;i<=n;i++){
            if(map[node][i]&&!visited[node]){
                q.push(i);
            }
        }
    }
}

int main(){
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
    cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>a>>b;
        map[a][b]=1;
        map[b][a]=1;}
    
    for(int i=1;i<=n;i++){
        if(!visited[n]) {ret++; bfs(n);}
    }
    
    cout<<ret<<"\n";
      
}



// 4. List X BFS 
#include <iostream>
#include <queue>
#include <vector>
#include <stdio.h>
#define MAX_SIZE 1000+1
using namespace std;
 
void bfs(int start);
vector<int> connected[MAX_SIZE];
bool visited[MAX_SIZE];
 
void bfs(int start) {
    queue<int> q;
 
    visited[start] = true;
    q.push(start);
    while (!q.empty()) {
        int current = q.front();
        q.pop();
 
        int csize = connected[current].size();
        for (int i = 0; i < csize; i++) {
            int next = connected[current][i];
            if (!visited[next]) {
                visited[next] = true;
                q.push(next);
            }
        }
    }
}
 
int main() {
    int n, m; // 정점의 개수, 간선의 개수
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; i++) { // 간선의 연결
        int u, v;
        scanf("%d %d", &u, &v);
        connected[u].push_back(v);
        connected[v].push_back(u);
    }
 
    int cnt = 0;
    fill_n(visited,n,0);
    
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            cnt++;
            bfs(i);
        }
    }
    printf("%d\n", cnt);
    return 0;
}
