#include <iostream>
using namespace std;
// 4가지 방법이 있다. matrix, list 2가지 버전과 X DFS, BFS 2가지 버전의 조합. 
// 1. matrix X DFS 
bool map[1001][1001];
bool visited[1001];
int n,m,a,b,ret{0};

void dfs(int n){
    visited[n];
    
    for(int j=1;j<=n;j++){
        if(map[n][j]&&!visited[j]){
            dfs(j);
        }
    }
}

void solution(){
cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>a>>b;
        map[a][b]=1; 
        map[b][a]=1;//무방향에서 필수 잊지말기:) 
        
    }
        
    for(int i=1;i<=n;i++){
        if(!visited[i]){//visited가 안되어있어야 그 부분부터 시작하는게 맞다. 
        ret++; 
        dfs(i);}
    }
   
   cout<<ret<<"\n";
}

int main()
{
    cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);
   solution();
    return 0;
}


//2. list + DFS
#include <bits/stdc++.h>
using namespace std;
#define N 1'000
vector<int> adj[N+1];
bool visited[N+1];
int ans;
int n,m;

void dfs(int u) {
    visited[u]=1;
    for (int v: adj[u]) //노드들의 번호들을 하나하나 넣어보면서 
        if (!visited[v]) dfs(v);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin>>n>>m;
    for (int i=0; i<m; ++i) {
        int a,b;cin>>a>>b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    for (int i=1; i<=n; ++i) {
        if (!visited[i]) {
            ans++;
            dfs(i);
        }
    }
    cout << ans;

    return 0;
}

//3. matrix+BFS




// 4. list X BFS 
#include <iostream>
#include <queue>
#include <vector>
#include <stdio.h>
#define MAX_SIZE 1000+1
using namespace std;
 
void bfs(int start);
vector<int> connected[MAX_SIZE];
bool visited[MAX_SIZE];
 
void bfs(int start) {
    queue<int> q;
 
    visited[start] = true;
    q.push(start);
    while (!q.empty()) {
        int current = q.front();
        q.pop();
 
        int csize = connected[current].size();
        for (int i = 0; i < csize; i++) {
            int next = connected[current][i];
            if (!visited[next]) {
                visited[next] = true;
                q.push(next);
            }
        }
    }
}
 
int main() {
    int n, m; // 정점의 개수, 간선의 개수
    scanf("%d %d", &n, &m);
    for (int i = 0; i < m; i++) { // 간선의 연결
        int u, v;
        scanf("%d %d", &u, &v);
        connected[u].push_back(v);
        connected[v].push_back(u);
    }
 
    int cnt = 0;
    fill_n(visited,n,0);
    
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            cnt++;
            bfs(i);
        }
    }
    printf("%d\n", cnt);
    return 0;
}
