//백준 10819 차이를 최대로 
// n<8이여서 다해보기 brute force, backtracking이용하기

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int N;
int n[9];
int result;
vector<int> v;
int visit[9];
int cnt = 0;

void solve() { //브루트포스 
	if (v.size() == N) {
		int tmp = 0;
		for (int i = 0; i < N-1; i++) {
			tmp += abs(v[i + 1] - v[i]);
		}
		result = max(result, tmp);
		return;
	}
	for (int i = 1; i <= N; i++) { //백트래킹
		if (!visit[i]) {
			visit[i] = 1;
			v.push_back(n[i]);
			solve();
			v.pop_back();
			visit[i] = 0;
		}
	}
}

int main() {
	cin >> N;
	for (int i = 1; i <= N; i++) {
		cin >> n[i];
	}

	solve();
	cout << result << endl;
}

//나
//백준 10819 차이를 최대로 
// n<8이여서 다해보기 brute force, backtracking이용하기

#include <iostream>
#include <vector>
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
int arr[9];
vector<int> v;
bool checked[9];
int n;
int ma{0};
void dfs(int node){
    
    if(v.size()==n){
        int sum{0}; int ma{0};
        for(int i=0; i<n; i++){
            sum+=abs(arr[i+1]-arr[i]);
        }
        ma= max(ma, sum);
        return;
    }
    
    
    checked[node]=1;
    v.push_back(arr[node]);
    
    if(!checked[node+1]){
        dfs(node+1);
        checked[node+1]=0;
        v.pop_back();
        
    }
}

int main()
{
    memset(checked,0,sizeof(checked)); 
   
    scanf("%d",&n);
    checked[n]=100; //배열의 끝 표시 
    int num;
    for(int i=0;i<n;i++){
        scanf("%d",&num);
        arr[i]=num;
    }
    
    for(int i=0;i<n;i++){
        if(!checked[i]) dfs(i);
    }

    return 0;
}


