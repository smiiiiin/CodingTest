// 백준 1261 알고스팟
// 다익스트라 알고리즘: 가중치가 있을때 출발지-도착지까지 가중치 최소인 것의 값을 저장
// https://kpumangyou.tistory.com/21

#include <iostream>
#include <cstdio>
#include <string>
#include <vector>
#include <queue>
#define MAX 101
#define INF 987654321 //or 0x3f3f3f
using namespace std;
int n, m; int map[MAX][MAX]; int wall[MAX][MAX];
int dy[4]= { -1,1,0,0 }; int dx[4]={0,0,-1,1};

void bfs() {
    queue<pair<int, int>> q; q.push({ 0,0 });
    wall[0][0] = 0; //중요: 시작점에서 시작점까지 가중치는 0이다!!!

    while (!q.empty()) {
        int y = q.front().first; int x = q.front().second; q.pop();
        for (int d = 0; d < 4; d++) {
            int ny = y + dy[d]; int nx = x + dx[d];
            if (ny <0 || nx<0 || ny>=m || nx>=n ) continue;
            if (map[ny][nx] == 1) {
                if (wall[ny][nx] > wall[y][x] + 1) {
                    wall[ny][nx] = wall[y][x] + 1; //벽이 있으면 가중치+1
                    q.push({ ny,nx });}}
            
            else if(map[ny][nx]==0) {
                if (wall[ny][nx] > wall[y][x]) {
                    wall[ny][nx] = wall[y][x]; //0일 경우 여태의 가중치 데려가기(=유지)
                    q.push({ ny,nx });}}
        }
    }
}

int main() {
    //ios_base::sync_with_stdio(false); cin.tie(NULL);
    cin >> n >> m;
    string str;
    for (int y = 0; y < m; y++) {
        for (int x = 0; x < n; x++) {
            wall[y][x] = INF;
            scanf("%1d",&map[y][x]);}}
    
    bfs();
    printf("%d\n" , wall[m-1][n-1]);
    return 0;}
